float sdBox( vector p, vector b){
  vector q = p - b;
  return length(max(q, 0.0)) + max(min(q[0],min(q[1],q[2]), 0.0));
}

float map( vector pos ){
  float d = sdBox(pos, vector(.5));

  return d;
}

vector calcNormals( vector pos ){
  float e = 0.0001;
  return normalize(vector(
                          map(pos + vector(e,0,0)) - map(pos - vector(e,0,0)),
                          map(pos + vector(0,e,0)) - map(pos - vector(0,e,0)),
                          map(pos + vector(0,0,e)) - map(pos - vector(0,0,e))
                          ));

}

shader infinate(
                vector ro = 0,
                vector rd = 0,
                int iter = 256,
                float plank = 0.001,
                float max_distance = 20.0,
                output color FragColor = 0,
                output float Alpha = 0
                )
{
  color col = vector(0);
  float alpha = 0;

  float t = 0.0;
  for ( int i=0; i<iter; i++){
    vector pos = ro + rd * t;

    float h = map( pos );

    if ( h < plank)
      break;

    t+=h;
  }

  if ( t< max_distance){
    color mate = color(.815, .08, .014);
    vector pos = ro + rd * t;

    vector norm = calcNormals(pos);
    vector spot_dir = normalize(vector(3,5,3) - pos);
    vector spot_diff = clamp(dot(norm, spot_dir), 0.0, 1.0);
    vector sky_diff = clamp(.6 + .4*dot(norm, vector(0,0,1)), 0.0, 1.0);

    col = mate * spot_diff;
    col += mate * sky_diff * vector(0.051);

    alpha = 1;
  }

  //col = pow(col, .4545);

  FragColor = color(col);
  Alpha = alpha;
}
