float tetrarec(vector p)
{
  float Scale = 2.0;
  int Ireration = 3;
  float r;
    int n = 0;
    while (n < Iterations) {
       if(p.x+p.y<0) p.xy = -p.yx; // fold 1
       if(p.x+p.z<0) p.xz = -p.zx; // fold 2
       if(p.y+p.z<0) p.zy = -p.yz; // fold 3	
       p = p*Scale - Offset*(Scale-1.0);
       n++;
    }
    return (length(p) ) * pow(Scale, -float(n));
}


float map( vector pos ){
  float d = tetrarec(pos);

  return d;
}

vector calcNormals( vector pos ){
  float e = 0.0001;
  return normalize(vector(
                          map(pos + vector(e,0,0)) - map(pos - vector(e,0,0)),
                          map(pos + vector(0,e,0)) - map(pos - vector(0,e,0)),
                          map(pos + vector(0,0,e)) - map(pos - vector(0,0,e))
                          ));

}

float castShadow(
                 vector ro,
                 vector rd,
                 float plank,
                 float tmax,
                 float k
                 )
{
  float res = 1.0;
  for ( float t=plank; t<tmax; ){
    vector pos = ro + rd * t;

    float h = map( pos );

    if ( h < plank)
      return 0.0;

    res = min(res, k*h/t);

    t+=h;
  }
  return res;
}

shader infinate(
                vector ro = 0,
                vector rd = 0,
                int iter = 256,
                float plank = 0.001,
                float max_distance = 20.0,
                output color FragColor = 0,
                output float Alpha = 0
                )
{
  color col = vector(0);
  float alpha = 0;

  float t = 0.0;
  for ( int i=0; i<iter; i++){
    vector pos = ro + rd * t;

    float h = map( pos );

    if ( h < plank)
      break;

    t+=h;
  }

  if ( t< max_distance){
    color mate = color(.815, .08, .014);
    vector pos = ro + rd * t;

    vector norm = calcNormals(pos);
    vector spot_dir = normalize(vector(3,5,3) - pos);
    vector spot_diff = clamp(dot(norm, spot_dir), 0.0, 1.0);
    vector sky_diff = clamp(.6 + .4*dot(norm, vector(0,0,1)), 0.0, 1.0);
    //float spot_sha = castShadow(pos + plank*norm, spot_dir, plank,
    //                             length(vector(pos[0],0,1.7) - pos), 4);

    col = mate * spot_diff;
    col += mate * sky_diff * vector(0.051);

    alpha = 1;
  }

  col = pow(col, .4545);

  FragColor = color(col);
  Alpha = alpha;
}
