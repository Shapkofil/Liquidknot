
float sdSphere(vector p, float r)
{
  return length(p) - r;
}

float sdPlane( vector p, float h)
{
  return p[2] - h;
}

float map(vector pos)
{
  vector tile_pos = vector(mod(pos[0]+2.0,4.0)-2.0,mod(pos[1]+2.0,4.0)-2.0, pos[2]);
  float d = sdSphere(tile_pos, .95);
  d = min(d, sdPlane(pos, -0.95));

  return d;
}

vector calcNormal( vector pos )
{
  float e = 0.0001;
  return normalize( vector(
                           map( pos + vector(e, 0, 0) ) - map ( pos - vector(e, 0, 0) ),
                           map( pos + vector(0, e, 0) ) - map ( pos - vector(0, e, 0) ),
                           map( pos + vector(0, 0, e) ) - map ( pos - vector(0, 0, e) )
                           ));
}

float castRay( vector ro, vector rd, int iter, float plank )
{
  float t = 0.0;
  for(int i=0; i<iter; i++)
    {
      vector pos = ro + t * rd;

      float h = map( pos );

      if ( h < plank )
        break;

      t += h;

    }

  return t;
}

float castShadow(
                 vector ro,
                 vector rd,
                 float plank,
                 float tmax,
                 float k
                 )
{
  float res = 1.0;
  for ( float t=plank; t<tmax; ){
    vector pos = ro + rd * t;

    float h = map( pos );

    if ( h < plank)
      return 0.0;

    res = min(res, k*h/t);

    t+=h;
  }
  return res;
}

shader subscribe(
                 vector ro = vector(0),
                 vector rd = vector(0),
                 int iter = 256,
                 float max_distance = 20.0,
                 float plank = 0.001,
                 output color FragColor = color(0),
                 output float Alpha = 0.0
                 )
{
  vector col = vector(0);
  float alpha = 0.0;

  float t = castRay(ro, rd, iter, plank);

    if( t < max_distance )
    {
      vector pos = ro + t*rd;
      vector mate = vector(.7);

      vector norm = calcNormal( pos );
      vector sun_dir = normalize( vector( 1.2, 0.5, .9));
      float sun_diff = clamp( dot( norm, sun_dir ), 0.0, 1.0);
      float sun_sha = castShadow( pos + plank*norm, sun_dir, plank, max_distance, 2);
      float sky_diff = clamp( .5 + .5*dot( norm, vector(0,0,1)), 0.0, 1.0);

      col = mate * sun_diff * vector(1.4, 1.1, .5) * sun_sha;
      col += mate * sky_diff * vector(.002, .009, .02);

      alpha = 1.0;
    }

  col = pow(col, .4545);

  FragColor = color(col);
  Alpha = alpha;

}
